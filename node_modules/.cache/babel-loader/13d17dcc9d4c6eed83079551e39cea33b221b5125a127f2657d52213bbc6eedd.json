{"ast":null,"code":"/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, CameraHelper } from 'three';\nimport Peridot from '../cast/peridot';\nimport SolarSystem from '../cast/solarSystem';\nimport darkSpace from '../textures/dark-space.jpg'; // from https://lh3.googleusercontent.com/9zE3StG50FuHs9PCo6kMTIhWKyIc3vJ2JqxPZEgaKc8WQ2vzAyWR4wqYYhMZ7zkhc0C893COYflGKt70Sb15e4gg7eI=w640-h400-e365-rj-sc0x00ffffff\nimport galaxyNight from '../textures/galaxy-night.jpg'; //got from google serach by search galaxy night\nimport nebula from '../textures/nebula.jpg'; //https://4kwallpapers.com/images/wallpapers/nebulae-cosmic-stars-dark-blue-dark-background-digital-5120x3200-3926.jpg\nconst DEFAULT_ROTATION_RATE = 0.01;\nconst createDemoUniverse = _ref => {\n  let {\n    fieldOfView,\n    width,\n    height,\n    nearPlane,\n    farPlane\n  } = _ref;\n  const scene = new Scene();\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane);\n  const textureLoader = new TextureLoader();\n  scene.background = textureLoader.load(nebula);\n  let moveDirection = 1;\n  const moveSpeed = 0.001;\n  const orbitRadius = 0.01;\n  const renderer = new WebGLRenderer();\n  renderer.setSize(width, height);\n  scene.add(new AmbientLight('white', 2));\n  const directionalLight = new DirectionalLight('white', 1);\n  directionalLight.position.set(-1.5, 1, 2);\n  directionalLight.target.position.set(0, 0, 0);\n  scene.add(directionalLight);\n  scene.add(directionalLight.target);\n  const directionalLightFromBehind = new DirectionalLight('white', 2);\n  directionalLightFromBehind.position.set(-1.5, 1, -2);\n  directionalLightFromBehind.target.position.set(0, 0, 0);\n  scene.add(directionalLightFromBehind);\n  scene.add(directionalLightFromBehind.target);\n  directionalLight.castShadow = true;\n  directionalLightFromBehind.castShadow = true;\n  directionalLight.shadow.mapSize.width = 1024;\n  directionalLight.shadow.mapSize.height = 1024;\n  directionalLight.shadow.camera.near = 0.5;\n  directionalLight.shadow.camera.far = 500;\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n  const setShadowHelperVisibility = visible => {\n    if (shadowHelper) {\n      shadowHelper.visible = visible;\n    }\n  };\n  const solarSystem = new SolarSystem();\n  scene.add(solarSystem.group);\n  solarSystem.garnet.group.castShadow = true;\n  solarSystem.group.receiveShadow = true;\n  const peridot = new Peridot();\n  scene.add(peridot.group);\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false;\n  const turn = () => {\n    turning = true;\n  };\n  const stop = () => {\n    turning = false;\n  };\n  const garnetOrbitRadius = 5; // Adjust the orbit radius as needed\n  let garnetOrbitAngle = 0;\n  const animate = () => {\n    window.requestAnimationFrame(animate);\n    if (turning) {\n      // Move Garnet in an orbit around the Sun\n      const orbitSpeed = 0.001; // Adjust the speed of the orbit\n      garnetOrbitAngle += orbitSpeed; // Adjust the speed of Garnet's orbit\n      solarSystem.garnet.group.position.x = Math.cos(garnetOrbitAngle) * garnetOrbitRadius;\n      solarSystem.garnet.group.position.y = Math.sin(garnetOrbitAngle) * garnetOrbitRadius;\n    }\n    if (turning) {\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2;\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4;\n    }\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n\n    if (turning) {\n      solarSystem.group.rotation.x += DEFAULT_ROTATION_RATE / 2;\n      solarSystem.group.rotation.y += DEFAULT_ROTATION_RATE / 4;\n    }\n    renderer.render(scene, camera);\n  };\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    shadowHelper,\n    cast: {\n      peridot,\n      solarSystem\n    }\n  };\n};\nexport { createDemoUniverse };","map":{"version":3,"names":["Scene","PerspectiveCamera","WebGLRenderer","AmbientLight","DirectionalLight","TextureLoader","CameraHelper","Peridot","SolarSystem","darkSpace","galaxyNight","nebula","DEFAULT_ROTATION_RATE","createDemoUniverse","fieldOfView","width","height","nearPlane","farPlane","scene","camera","textureLoader","background","load","moveDirection","moveSpeed","orbitRadius","renderer","setSize","add","directionalLight","position","set","target","directionalLightFromBehind","castShadow","shadow","mapSize","near","far","shadowHelper","setShadowHelperVisibility","visible","solarSystem","group","garnet","receiveShadow","peridot","turning","turn","stop","garnetOrbitRadius","garnetOrbitAngle","animate","window","requestAnimationFrame","orbitSpeed","x","Math","cos","y","sin","rotation","render","cast"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/universes/demo-universe.js"],"sourcesContent":["/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, CameraHelper } from 'three'\n\nimport Peridot from '../cast/peridot'\n\nimport SolarSystem from '../cast/solarSystem'\nimport darkSpace from '../textures/dark-space.jpg' // from https://lh3.googleusercontent.com/9zE3StG50FuHs9PCo6kMTIhWKyIc3vJ2JqxPZEgaKc8WQ2vzAyWR4wqYYhMZ7zkhc0C893COYflGKt70Sb15e4gg7eI=w640-h400-e365-rj-sc0x00ffffff\nimport galaxyNight from '../textures/galaxy-night.jpg' //got from google serach by search galaxy night\nimport nebula from '../textures/nebula.jpg'//https://4kwallpapers.com/images/wallpapers/nebulae-cosmic-stars-dark-blue-dark-background-digital-5120x3200-3926.jpg\nconst DEFAULT_ROTATION_RATE = 0.01\n\nconst createDemoUniverse = ({ fieldOfView, width, height, nearPlane, farPlane}) => {\n  const scene = new Scene()\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane)\n\n  const textureLoader = new TextureLoader()\n  scene.background = textureLoader.load(nebula)\n\n  let moveDirection = 1;\n  const moveSpeed = 0.001;\n  const orbitRadius = 0.01;\n\n\n\n  const renderer = new WebGLRenderer()\n  renderer.setSize(width, height)\n\n  scene.add(new AmbientLight('white', 2))\n\n  const directionalLight = new DirectionalLight('white', 1)\n  directionalLight.position.set(-1.5, 1, 2)\n  directionalLight.target.position.set(0, 0, 0)\n  scene.add(directionalLight)\n  scene.add(directionalLight.target)\n\n  const directionalLightFromBehind = new DirectionalLight('white', 2)\n  directionalLightFromBehind.position.set(-1.5, 1, -2)\n  directionalLightFromBehind.target.position.set(0, 0, 0)\n  scene.add(directionalLightFromBehind)\n  scene.add(directionalLightFromBehind.target)\n\n  directionalLight.castShadow = true\n  directionalLightFromBehind.castShadow = true\n\n  directionalLight.shadow.mapSize.width = 1024\n  directionalLight.shadow.mapSize.height = 1024\n  directionalLight.shadow.camera.near = 0.5\n  directionalLight.shadow.camera.far = 500\n\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n\n  const setShadowHelperVisibility = (visible) => {\n    if (shadowHelper) {\n      shadowHelper.visible = visible;\n    }\n  }\n\n  const solarSystem = new SolarSystem()\n  scene.add(solarSystem.group)\n  solarSystem.garnet.group.castShadow = true;\n  solarSystem.group.receiveShadow = true;\n\n  const peridot = new Peridot()\n  scene.add(peridot.group)\n\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false\n  const turn = () => {\n    turning = true\n  }\n\n  const stop = () => {\n    turning = false\n  }\n\n  const garnetOrbitRadius = 5; // Adjust the orbit radius as needed\n  let garnetOrbitAngle = 0;\n\n  const animate = () => {\n    window.requestAnimationFrame(animate)\n  \n  \n  if (turning) {\n\n  // Move Garnet in an orbit around the Sun\n  const orbitSpeed = 0.001; // Adjust the speed of the orbit\n  garnetOrbitAngle += orbitSpeed; // Adjust the speed of Garnet's orbit\n  solarSystem.garnet.group.position.x = Math.cos(garnetOrbitAngle) * garnetOrbitRadius;\n  solarSystem.garnet.group.position.y = Math.sin(garnetOrbitAngle) * garnetOrbitRadius;\n  }\n\n    if (turning) {\n\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4\n    }\n\n\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n    \n    if (turning) {\n      solarSystem.group.rotation.x += DEFAULT_ROTATION_RATE / 2;\n      solarSystem.group.rotation.y += DEFAULT_ROTATION_RATE / 4;\n    }\n    renderer.render(scene, camera)\n  }\n\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    shadowHelper,\n    cast: {\n\n      peridot,\n      solarSystem\n    }\n  }\n}\n\nexport { createDemoUniverse }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}