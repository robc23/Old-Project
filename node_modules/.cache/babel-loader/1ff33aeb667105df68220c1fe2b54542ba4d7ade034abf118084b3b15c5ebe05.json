{"ast":null,"code":"import { BufferGeometry, BufferAttribute, MeshPhongMaterial, Mesh, Group } from 'three';\nimport { Tween, Ease } from '@createjs/tweenjs';\n\n// Here’s a case where Prettier doesn’t quite do the best job so we take the responsibility of formatting\n// this ourselves.\n//\n// prettier-ignore\nconst BASE_VERTICES = [[-1, 0, 0],\n// 0: Left middle.\n[0, 0, 0.5],\n// 1: Front middle.\n[1, 0, 0],\n// 2: Right middle.\n[0, 0, -0.5],\n// 3: Back middle.\n[0, 1.75, 0],\n// 4: Top.\n[0, -0.5, 0],\n// 5: Bottom.\n// Additional irregular vertices for asteroid-like structure concept.\n[-0.5, 0.5, 0.5],\n// 6\n[0.5, 0.5, 0.5],\n// 7\n[-0.5, -0.5, -0.5],\n// 8\n[0.5, -0.5, -0.5] // 9\n];\n\n// prettier-ignore\nconst BASE_COLORS = [[0.3, 0.3, 0.3],\n// 0: Dark gray.\n[0.2, 0.2, 0.2],\n// 1: Slightly darker gray.\n[1.0, 1.0, 1.0],\n// 2: White.\n[0.1, 0.1, 0.1],\n// 3: Very dark gray (almost black).\n[0.5, 0.5, 0.5],\n// 4: Medium gray.\n[0.25, 1, 0.75] // 5: Light cyan-ish.\n];\n\n/**\n * Creates a custom geometry out of a raw listing of vertices. Working this out on graph paper can be\n * a good first step here! Alternatively, you can write some code to generate these vertices, if the\n * shape that you have in mind can be computed in some way.\n */\nconst createFacetedPeridotGeometry = () => {\n  const geometry = new BufferGeometry();\n\n  // We build each triangle as a separate face, copying a vertex if needed. Remember, counterclockwise\n  // is the “front.”\n  //\n  // prettier-ignore\n  const vertices = new Float32Array([...BASE_VERTICES[0], ...BASE_VERTICES[1], ...BASE_VERTICES[6],\n  // Left-front-top\n  ...BASE_VERTICES[1], ...BASE_VERTICES[2], ...BASE_VERTICES[7],\n  // Right-front-top\n  ...BASE_VERTICES[0], ...BASE_VERTICES[5], ...BASE_VERTICES[6],\n  // Left-bottom-front\n  ...BASE_VERTICES[5], ...BASE_VERTICES[6], ...BASE_VERTICES[8],\n  // Left-bottom-back\n  ...BASE_VERTICES[0], ...BASE_VERTICES[3], ...BASE_VERTICES[8],\n  // Left-top-back\n  ...BASE_VERTICES[3], ...BASE_VERTICES[8], ...BASE_VERTICES[9],\n  // Right-top-back\n  ...BASE_VERTICES[0], ...BASE_VERTICES[2], ...BASE_VERTICES[7],\n  // Right-top-front\n  ...BASE_VERTICES[3], ...BASE_VERTICES[9], ...BASE_VERTICES[7] // Right-bottom-front\n  ]);\n\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n\n  // We coordinate our colors to match the corresopnding vertex.\n  //\n  // prettier-ignore\n  const colors = new Float32Array([...BASE_COLORS[0], ...BASE_COLORS[1], ...BASE_COLORS[4], ...BASE_COLORS[1], ...BASE_COLORS[2], ...BASE_COLORS[4], ...BASE_COLORS[0], ...BASE_COLORS[5], ...BASE_COLORS[1], ...BASE_COLORS[1], ...BASE_COLORS[5], ...BASE_COLORS[2], ...BASE_COLORS[0], ...BASE_COLORS[4], ...BASE_COLORS[3], ...BASE_COLORS[3], ...BASE_COLORS[4], ...BASE_COLORS[2], ...BASE_COLORS[0], ...BASE_COLORS[3], ...BASE_COLORS[5], ...BASE_COLORS[2], ...BASE_COLORS[2], ...BASE_COLORS[4], ...BASE_COLORS[3], ...BASE_COLORS[3], ...BASE_COLORS[5]]);\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n  geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n  // With every face having its “own” vertex (since vertices are always copied), the computed normals correspond\n  // exactly to the faces’ directions, leading to a faceted look.\n  geometry.computeVertexNormals();\n  return geometry;\n};\n\n/**\n * Creates nearly the same geometry, but with a smooth look.\n */\nconst createSmoothPeridotGeometry = () => {\n  const geometry = new BufferGeometry();\n\n  // This effectively “flattens” our base vertices.\n  const vertices = new Float32Array([...BASE_VERTICES[0], ...BASE_VERTICES[1], ...BASE_VERTICES[9], ...BASE_VERTICES[8], ...BASE_VERTICES[2], ...BASE_VERTICES[0], ...BASE_VERTICES[4]]);\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n  const colors = new Float32Array([...BASE_COLORS[0], ...BASE_COLORS[1], ...BASE_COLORS[2], ...BASE_COLORS[3], ...BASE_COLORS[5], ...BASE_COLORS[5]]);\n  geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n  // Note that this is effectively the same as the faceted version’s triangles, except that the use of\n  // index values lets us _genuinely share_ a vertex (well, at least at this level) rather than copying\n  // them for adjacent triangles.\n  //\n  // prettier-ignore\n  geometry.setIndex([0, 1, 4,\n  // Front upper-left quadrant.\n  1, 2, 4,\n  // Front upper-right quararnt.\n  0, 5, 1,\n  // Front bottom-left quadrant.\n  1, 5, 2,\n  // Front bottom-right quadrant.\n  0, 4, 3,\n  // Rear upper-left quadrant (if looking at it from the front).\n  3, 4, 2,\n  // Rear upper-right quadrant.\n  0, 3, 5,\n  // Rear bottom-left quadrant.\n  2, 5, 3 // Rear bottom-right quadrant.\n  ]);\n\n  // Using `setIndex` causes faces/triangles to share vertices, which then causes vertex normal computation\n  // to _average out_ the normals of multiple faces, thus creating a “smoothing” effect.\n  geometry.computeVertexNormals();\n  return geometry;\n};\nclass Peridot {\n  constructor() {\n    const material = new MeshPhongMaterial({\n      vertexColors: true\n    });\n    const facetedGeometry = createFacetedPeridotGeometry();\n    const facetedMesh = new Mesh(facetedGeometry, material);\n    facetedMesh.position.x = -2;\n    const smoothGeometry = createSmoothPeridotGeometry();\n    const smoothMesh = new Mesh(smoothGeometry, material);\n    smoothMesh.position.x = 2;\n    this.group = new Group();\n    this.group.add(facetedMesh);\n    this.group.add(smoothMesh);\n  }\n  reset() {\n    Tween.get(this.group.rotation).to({\n      x: 0,\n      y: 0,\n      z: 0\n    }, 2000, Ease.sineInOut);\n  }\n}\nexport default Peridot;","map":{"version":3,"names":["BufferGeometry","BufferAttribute","MeshPhongMaterial","Mesh","Group","Tween","Ease","BASE_VERTICES","BASE_COLORS","createFacetedPeridotGeometry","geometry","vertices","Float32Array","setAttribute","colors","computeVertexNormals","createSmoothPeridotGeometry","setIndex","Peridot","constructor","material","vertexColors","facetedGeometry","facetedMesh","position","x","smoothGeometry","smoothMesh","group","add","reset","get","rotation","to","y","z","sineInOut"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/cast/peridot.js"],"sourcesContent":["import { BufferGeometry, BufferAttribute, MeshPhongMaterial, Mesh, Group } from 'three'\nimport { Tween, Ease } from '@createjs/tweenjs'\n\n// Here’s a case where Prettier doesn’t quite do the best job so we take the responsibility of formatting\n// this ourselves.\n//\n// prettier-ignore\nconst BASE_VERTICES = [\n  [-1, 0, 0],        // 0: Left middle.\n  [0, 0, 0.5],        // 1: Front middle.\n  [1, 0, 0],          // 2: Right middle.\n  [0, 0, -0.5],       // 3: Back middle.\n  [0, 1.75, 0],       // 4: Top.\n  [0, -0.5, 0],       // 5: Bottom.\n  // Additional irregular vertices for asteroid-like structure concept.\n  [-0.5, 0.5, 0.5],   // 6\n  [0.5, 0.5, 0.5],    // 7\n  [-0.5, -0.5, -0.5],  // 8\n  [0.5, -0.5, -0.5]    // 9\n]\n\n// prettier-ignore\nconst BASE_COLORS = [\n  [0.3, 0.3, 0.3],   // 0: Dark gray.\n  [0.2, 0.2, 0.2],   // 1: Slightly darker gray.\n  [1.0, 1.0, 1.0],   // 2: White.\n  [0.1, 0.1, 0.1],   // 3: Very dark gray (almost black).\n  [0.5, 0.5, 0.5],   // 4: Medium gray.\n  [0.25,    1,  0.75], // 5: Light cyan-ish.\n]\n\n/**\n * Creates a custom geometry out of a raw listing of vertices. Working this out on graph paper can be\n * a good first step here! Alternatively, you can write some code to generate these vertices, if the\n * shape that you have in mind can be computed in some way.\n */\nconst createFacetedPeridotGeometry = () => {\n  const geometry = new BufferGeometry()\n\n  // We build each triangle as a separate face, copying a vertex if needed. Remember, counterclockwise\n  // is the “front.”\n  //\n  // prettier-ignore\n  const vertices = new Float32Array([\n    ...BASE_VERTICES[0], ...BASE_VERTICES[1], ...BASE_VERTICES[6], // Left-front-top\n    ...BASE_VERTICES[1], ...BASE_VERTICES[2], ...BASE_VERTICES[7], // Right-front-top\n    ...BASE_VERTICES[0], ...BASE_VERTICES[5], ...BASE_VERTICES[6], // Left-bottom-front\n    ...BASE_VERTICES[5], ...BASE_VERTICES[6], ...BASE_VERTICES[8], // Left-bottom-back\n    ...BASE_VERTICES[0], ...BASE_VERTICES[3], ...BASE_VERTICES[8], // Left-top-back\n    ...BASE_VERTICES[3], ...BASE_VERTICES[8], ...BASE_VERTICES[9], // Right-top-back\n    ...BASE_VERTICES[0], ...BASE_VERTICES[2], ...BASE_VERTICES[7], // Right-top-front\n    ...BASE_VERTICES[3], ...BASE_VERTICES[9], ...BASE_VERTICES[7], // Right-bottom-front\n  ])\n\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3))\n\n  // We coordinate our colors to match the corresopnding vertex.\n  //\n  // prettier-ignore\n  const colors = new Float32Array([\n    ...BASE_COLORS[0], ...BASE_COLORS[1], ...BASE_COLORS[4],\n    ...BASE_COLORS[1], ...BASE_COLORS[2], ...BASE_COLORS[4],\n    ...BASE_COLORS[0], ...BASE_COLORS[5], ...BASE_COLORS[1],\n    ...BASE_COLORS[1], ...BASE_COLORS[5], ...BASE_COLORS[2],\n    ...BASE_COLORS[0], ...BASE_COLORS[4], ...BASE_COLORS[3],\n    ...BASE_COLORS[3], ...BASE_COLORS[4], ...BASE_COLORS[2],\n    ...BASE_COLORS[0], ...BASE_COLORS[3], ...BASE_COLORS[5],\n    ...BASE_COLORS[2], ...BASE_COLORS[2], ...BASE_COLORS[4],\n    ...BASE_COLORS[3], ...BASE_COLORS[3], ...BASE_COLORS[5],\n  ])\n\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n  geometry.setAttribute('color', new BufferAttribute(colors, 3))\n\n  // With every face having its “own” vertex (since vertices are always copied), the computed normals correspond\n  // exactly to the faces’ directions, leading to a faceted look.\n  geometry.computeVertexNormals()\n  return geometry\n}\n\n/**\n * Creates nearly the same geometry, but with a smooth look.\n */\nconst createSmoothPeridotGeometry = () => {\n  const geometry = new BufferGeometry()\n\n  // This effectively “flattens” our base vertices.\n  const vertices = new Float32Array([\n    ...BASE_VERTICES[0],\n    ...BASE_VERTICES[1],\n    ...BASE_VERTICES[9],\n    ...BASE_VERTICES[8],\n    ...BASE_VERTICES[2],\n    ...BASE_VERTICES[0],\n    ...BASE_VERTICES[4]\n  ])\n\n  geometry.setAttribute('position', new BufferAttribute(vertices, 3))\n\n  const colors = new Float32Array([\n    ...BASE_COLORS[0],\n    ...BASE_COLORS[1],\n    ...BASE_COLORS[2],\n    ...BASE_COLORS[3],\n    ...BASE_COLORS[5],\n    ...BASE_COLORS[5]\n  ])\n\n  geometry.setAttribute('color', new BufferAttribute(colors, 3))\n\n  // Note that this is effectively the same as the faceted version’s triangles, except that the use of\n  // index values lets us _genuinely share_ a vertex (well, at least at this level) rather than copying\n  // them for adjacent triangles.\n  //\n  // prettier-ignore\n  geometry.setIndex([\n    0, 1, 4, // Front upper-left quadrant.\n    1, 2, 4, // Front upper-right quararnt.\n    0, 5, 1, // Front bottom-left quadrant.\n    1, 5, 2, // Front bottom-right quadrant.\n    0, 4, 3, // Rear upper-left quadrant (if looking at it from the front).\n    3, 4, 2, // Rear upper-right quadrant.\n    0, 3, 5, // Rear bottom-left quadrant.\n    2, 5, 3  // Rear bottom-right quadrant.\n  ])\n\n  // Using `setIndex` causes faces/triangles to share vertices, which then causes vertex normal computation\n  // to _average out_ the normals of multiple faces, thus creating a “smoothing” effect.\n  geometry.computeVertexNormals()\n  return geometry\n}\n\nclass Peridot {\n  constructor() {\n    const material = new MeshPhongMaterial({ vertexColors: true })\n\n    const facetedGeometry = createFacetedPeridotGeometry()\n    const facetedMesh = new Mesh(facetedGeometry, material)\n    facetedMesh.position.x = -2\n\n    const smoothGeometry = createSmoothPeridotGeometry()\n    const smoothMesh = new Mesh(smoothGeometry, material)\n    smoothMesh.position.x = 2\n\n    this.group = new Group()\n    this.group.add(facetedMesh)\n    this.group.add(smoothMesh)\n  }\n\n  reset() {\n    Tween.get(this.group.rotation).to({ x: 0, y: 0, z: 0 }, 2000, Ease.sineInOut)\n  }\n}\n\nexport default Peridot\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}