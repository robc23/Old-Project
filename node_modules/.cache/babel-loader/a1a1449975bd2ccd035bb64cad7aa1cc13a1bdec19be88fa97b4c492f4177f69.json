{"ast":null,"code":"/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera, CameraHelper } from 'three';\nimport Garnet from '../cast/garnet';\nimport Peridot from '../cast/peridot';\nimport galaxyNight from '../textures/galaxy-night.jpg';\nconst DEFAULT_ROTATION_RATE = 0.03;\nconst createDemoUniverse = _ref => {\n  let {\n    fieldOfView,\n    width,\n    height,\n    nearPlane,\n    farPlane\n  } = _ref;\n  const scene = new Scene();\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane);\n  camera.position.z = 10;\n  const textureLoader = new TextureLoader();\n  scene.background = textureLoader.load(galaxyNight);\n  let moveDirection = 1;\n  const moveSpeed = 0.01;\n  const orbitRadius = 0.05;\n  const backgroundRingCamera = new Camera();\n  const backgroundRing = new RingGeometry(2);\n  const backgroundMaterial = new MeshBasicMaterial({\n    color: 'brown'\n  });\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial);\n  scene.add(backgroundMesh);\n  const renderer = new WebGLRenderer();\n  renderer.setSize(width, height);\n  scene.add(new AmbientLight('white', 1.5));\n  const directionalLight = new DirectionalLight('white', 1);\n  directionalLight.position.set(-1.5, 1, 2);\n  directionalLight.target.position.set(0, 0, 0);\n  scene.add(directionalLight);\n  scene.add(directionalLight.target);\n  directionalLight.castShadow = true;\n  directionalLight.shadow.mapSize.width = 1024;\n  directionalLight.shadow.mapSize.height = 1024;\n  directionalLight.shadow.camera.near = 0.5;\n  directionalLight.shadow.camera.far = 500;\n  const directionalLightFromBehind = new DirectionalLight('white', 2);\n  directionalLightFromBehind.position.set(-1.5, 1, -2);\n  directionalLightFromBehind.target.position.set(0, 0, 0);\n  scene.add(directionalLightFromBehind);\n  scene.add(directionalLightFromBehind.target);\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n  const garnet = new Garnet('gray');\n  scene.add(garnet.mesh);\n  const peridot = new Peridot();\n  scene.add(peridot.group);\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false;\n  const turn = () => {\n    turning = true;\n  };\n  const stop = () => {\n    turning = false;\n  };\n  const animate = () => {\n    window.requestAnimationFrame(animate);\n    const angle = DEFAULT_ROTATION_RATE * moveDirection;\n    garnet.mesh.position.x = orbitRadius * Math.cos(angle) / 2;\n    garnet.mesh.position.y = orbitRadius * Math.sin(angle);\n    backgroundMesh.rotation.x += DEFAULT_ROTATION_RATE;\n    backgroundMesh.rotation.y += DEFAULT_ROTATION_RATE;\n    garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE;\n    garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE;\n    if (turning) {\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2;\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4;\n    }\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera);\n  };\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot\n    }\n  };\n};\nexport { createDemoUniverse };","map":{"version":3,"names":["Scene","PerspectiveCamera","WebGLRenderer","AmbientLight","DirectionalLight","TextureLoader","RingGeometry","MeshBasicMaterial","Mesh","Camera","CameraHelper","Garnet","Peridot","galaxyNight","DEFAULT_ROTATION_RATE","createDemoUniverse","fieldOfView","width","height","nearPlane","farPlane","scene","camera","position","z","textureLoader","background","load","moveDirection","moveSpeed","orbitRadius","backgroundRingCamera","backgroundRing","backgroundMaterial","color","backgroundMesh","add","renderer","setSize","directionalLight","set","target","castShadow","shadow","mapSize","near","far","directionalLightFromBehind","shadowHelper","garnet","mesh","peridot","group","turning","turn","stop","animate","window","requestAnimationFrame","angle","x","Math","cos","y","sin","rotation","render","cast"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/universes/demo-universe.js"],"sourcesContent":["/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera, CameraHelper } from 'three'\nimport Garnet from '../cast/garnet'\nimport Peridot from '../cast/peridot'\nimport galaxyNight from '../textures/galaxy-night.jpg'\n \nconst DEFAULT_ROTATION_RATE = 0.03\n\nconst createDemoUniverse = ({ fieldOfView, width, height, nearPlane, farPlane}) => {\n  const scene = new Scene()\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane)\n  camera.position.z = 10\n\n  const textureLoader = new TextureLoader()\n  scene.background = textureLoader.load(galaxyNight)\n\n  let moveDirection = 1;\n  const moveSpeed = 0.01;\n  const orbitRadius = 0.05;\n\n  const backgroundRingCamera = new Camera()\n  const backgroundRing = new RingGeometry(2)\n  const backgroundMaterial = new MeshBasicMaterial({ color: 'brown' })\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial)\n  scene.add(backgroundMesh)\n\n  const renderer = new WebGLRenderer()\n  renderer.setSize(width, height)\n\n  scene.add(new AmbientLight('white', 1.5))\n\n  const directionalLight = new DirectionalLight('white', 1)\n  directionalLight.position.set(-1.5, 1, 2)\n  directionalLight.target.position.set(0, 0, 0)\n  scene.add(directionalLight)\n  scene.add(directionalLight.target)\n  directionalLight.castShadow = true;\n\n  directionalLight.shadow.mapSize.width = 1024;\n  directionalLight.shadow.mapSize.height = 1024;\n  directionalLight.shadow.camera.near = 0.5;\n  directionalLight.shadow.camera.far = 500;\n\n\n  const directionalLightFromBehind = new DirectionalLight('white', 2)\n  directionalLightFromBehind.position.set(-1.5, 1, -2)\n  directionalLightFromBehind.target.position.set(0, 0, 0)\n  scene.add(directionalLightFromBehind)\n  scene.add(directionalLightFromBehind.target)\n\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n\n  const garnet = new Garnet('gray')\n  scene.add(garnet.mesh)\n\n  const peridot = new Peridot()\n  scene.add(peridot.group)\n\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false\n  const turn = () => {\n    turning = true\n  }\n\n  const stop = () => {\n    turning = false\n  }\n\n  const animate = () => {\n    window.requestAnimationFrame(animate)\n\n    const angle = DEFAULT_ROTATION_RATE * moveDirection;\n    garnet.mesh.position.x = orbitRadius * Math.cos(angle)/2;\n    garnet.mesh.position.y = orbitRadius * Math.sin(angle);\n\n    backgroundMesh.rotation.x += DEFAULT_ROTATION_RATE;\n    backgroundMesh.rotation.y += DEFAULT_ROTATION_RATE;\n\n    garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE\n    garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE\n\n    if (turning) {\n\n\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4\n    }\n\n\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera)\n  }\n\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot\n    }\n  }\n}\n\nexport { createDemoUniverse }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}