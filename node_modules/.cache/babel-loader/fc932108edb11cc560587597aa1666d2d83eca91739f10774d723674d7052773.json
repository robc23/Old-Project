{"ast":null,"code":"/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera } from 'three';\nimport Garnet from '../cast/garnet';\nimport Peridot from '../cast/peridot';\nimport galaxyNight from '../textures/galaxy-night.jpg';\nconst DEFAULT_ROTATION_RATE = 0.03;\nconst createDemoUniverse = _ref => {\n  let {\n    fieldOfView,\n    width,\n    height,\n    nearPlane,\n    farPlane\n  } = _ref;\n  const scene = new Scene();\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane);\n  const textureLoader = new TextureLoader();\n  scene.background = textureLoader.load(galaxyNight);\n  const backgroundRingCamera = new Camera();\n  const backgroundRing = new RingGeometry(2);\n  const backgroundMaterial = new MeshBasicMaterial({\n    color: 'brown'\n  });\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial);\n  scene.add(backgroundMesh);\n  let ringRotationRate = 0.005;\n  let ringColorChangeRate = 0.005;\n  const animateBackgroundRing = () => {\n    // Add rotation to the ring\n    backgroundMesh.rotation.x += ringRotationRate;\n    backgroundMesh.rotation.y += ringRotationRate;\n\n    // Change color of the ring\n    const colorHSL = backgroundMaterial.color.getHSL();\n    backgroundMaterial.color.setHSL(colorHSL.h + ringColorChangeRate, colorHSL.s, colorHSL.l);\n    requestAnimationFrame(animateBackgroundRing);\n  };\n  backgroundRingCamera.onBeforeRender = animateBackgroundRing();\n  const renderer = new WebGLRenderer();\n  renderer.setSize(width, height);\n  scene.add(new AmbientLight('white', 0.5));\n  const directionalLight = new DirectionalLight('white', 1);\n  directionalLight.position.set(-1.5, 1, 2);\n  directionalLight.target.position.set(0, 0, 0);\n  scene.add(directionalLight);\n  scene.add(directionalLight.target);\n  const directionalLightFromBehind = new DirectionalLight('white', 1);\n  directionalLightFromBehind.position.set(-1.5, 1, -2);\n  directionalLightFromBehind.target.position.set(0, 0, 0);\n  scene.add(directionalLightFromBehind);\n  scene.add(directionalLightFromBehind.target);\n  const garnet = new Garnet('gray');\n  scene.add(garnet.mesh);\n  const peridot = new Peridot();\n  scene.add(peridot.group);\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false;\n  const turn = () => {\n    turning = true;\n  };\n  const stop = () => {\n    turning = false;\n  };\n  const animate = () => {\n    window.requestAnimationFrame(animate);\n    if (turning) {\n      garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE;\n      garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE;\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2;\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4;\n    }\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera);\n  };\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot\n    }\n  };\n};\nexport { createDemoUniverse };","map":{"version":3,"names":["Scene","PerspectiveCamera","WebGLRenderer","AmbientLight","DirectionalLight","TextureLoader","RingGeometry","MeshBasicMaterial","Mesh","Camera","Garnet","Peridot","galaxyNight","DEFAULT_ROTATION_RATE","createDemoUniverse","fieldOfView","width","height","nearPlane","farPlane","scene","camera","textureLoader","background","load","backgroundRingCamera","backgroundRing","backgroundMaterial","color","backgroundMesh","add","ringRotationRate","ringColorChangeRate","animateBackgroundRing","rotation","x","y","colorHSL","getHSL","setHSL","h","s","l","requestAnimationFrame","onBeforeRender","renderer","setSize","directionalLight","position","set","target","directionalLightFromBehind","garnet","mesh","peridot","group","turning","turn","stop","animate","window","render","cast"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/universes/demo-universe.js"],"sourcesContent":["/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera } from 'three'\nimport Garnet from '../cast/garnet'\nimport Peridot from '../cast/peridot'\nimport galaxyNight from '../textures/galaxy-night.jpg'\n \nconst DEFAULT_ROTATION_RATE = 0.03\n\nconst createDemoUniverse = ({ fieldOfView, width, height, nearPlane, farPlane}) => {\n  const scene = new Scene()\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane)\n\n  const textureLoader = new TextureLoader()\n  scene.background = textureLoader.load(galaxyNight)\n\n  const backgroundRingCamera = new Camera()\n  const backgroundRing = new RingGeometry(2)\n  const backgroundMaterial = new MeshBasicMaterial({ color: 'brown' })\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial)\n  scene.add(backgroundMesh)\n\n  let ringRotationRate = 0.005;\n  let ringColorChangeRate = 0.005;\n  const animateBackgroundRing = () => {\n    // Add rotation to the ring\n    backgroundMesh.rotation.x += ringRotationRate;\n    backgroundMesh.rotation.y += ringRotationRate;\n\n    // Change color of the ring\n    const colorHSL = backgroundMaterial.color.getHSL();\n    backgroundMaterial.color.setHSL(colorHSL.h + ringColorChangeRate, colorHSL.s, colorHSL.l);\n\n    requestAnimationFrame(animateBackgroundRing);\n  };\n\n  backgroundRingCamera.onBeforeRender = animateBackgroundRing();\n\n  const renderer = new WebGLRenderer()\n  renderer.setSize(width, height)\n\n  scene.add(new AmbientLight('white', 0.5))\n\n  const directionalLight = new DirectionalLight('white', 1)\n  directionalLight.position.set(-1.5, 1, 2)\n  directionalLight.target.position.set(0, 0, 0)\n  scene.add(directionalLight)\n  scene.add(directionalLight.target)\n\n  const directionalLightFromBehind = new DirectionalLight('white', 1)\n  directionalLightFromBehind.position.set(-1.5, 1, -2)\n  directionalLightFromBehind.target.position.set(0, 0, 0)\n  scene.add(directionalLightFromBehind)\n  scene.add(directionalLightFromBehind.target)\n\n  const garnet = new Garnet('gray')\n  scene.add(garnet.mesh)\n\n  const peridot = new Peridot()\n  scene.add(peridot.group)\n\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false\n  const turn = () => {\n    turning = true\n  }\n\n  const stop = () => {\n    turning = false\n  }\n\n  const animate = () => {\n    window.requestAnimationFrame(animate)\n\n    if (turning) {\n      garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE\n      garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE\n\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4\n    }\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera)\n  }\n\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot\n    }\n  }\n}\n\nexport { createDemoUniverse }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}