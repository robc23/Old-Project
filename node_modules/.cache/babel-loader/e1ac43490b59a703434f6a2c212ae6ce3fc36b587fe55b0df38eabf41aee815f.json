{"ast":null,"code":"/**\n * @license Event\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Contains properties and methods shared by all events for use with {@link core.EventDispatcher}.\n * Note that Event objects are often reused, so you should never\n * rely on an event object's state outside of the call stack it was received in.\n *\n * @memberof core\n * @example\n * const evt = new Event(\"myEvent\");\n * const dispatcher = new EventDispatcher();\n * dispatcher.on(\"myEvent\", event => console.log(event.type));\n * dispatcher.dispatchEvent(evt); // logs \"myEvent\"\n *\n * @param {string} type The event type.\n * @param {boolean} [bubbles=false] Indicates whether the event will bubble through the display list.\n * @param {boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.\n */\nclass Event {\n  constructor(type) {\n    let bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    /**\n     * The type of event.\n     * @type string\n     */\n    this.type = type;\n\n    /**\n     * The object that generated an event.\n     *\n     * @type Object\n     * @default null\n     * @readonly\n     */\n    this.target = null;\n\n    /**\n     * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n     * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n     * is generated from childObj, then a listener on parentObj would receive the event with\n     * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n     *\n     * @type Object\n     * @default null\n     * @readonly\n     */\n    this.currentTarget = null;\n\n    /**\n     * For bubbling events, this indicates the current event phase:\n     * <OL>\n     * \t<LI> capture phase: starting from the top parent to the target</LI>\n     * \t<LI> at target phase: currently being dispatched from the target</LI>\n     * \t<LI> bubbling phase: from the target to the top parent</LI>\n     * </OL>\n     *\n     * @type number\n     * @default 0\n     * @readonly\n     */\n    this.eventPhase = 0;\n\n    /**\n     * Indicates whether the event will bubble through the display list.\n     *\n     * @type boolean\n     * @readonly\n     */\n    this.bubbles = bubbles;\n\n    /**\n     * Indicates whether the default behaviour of this event can be cancelled via {@link core.Event#preventDefault}.\n     *\n     * @type boolean\n     * @readonly\n     */\n    this.cancelable = cancelable;\n\n    /**\n     * The epoch time at which this event was created.\n     *\n     * @type number\n     * @readonly\n     */\n    this.timeStamp = new Date().getTime();\n\n    /**\n     * Indicates if {@link core.Event#preventDefault} has been called on this event.\n     *\n     * @type boolean\n     * @default false\n     * @readonly\n     */\n    this.defaultPrevented = false;\n\n    /**\n     * Indicates if {@link core.Event#stopPropagation} or {@link core.Event#stopImmediatePropagation} has been called on this event.\n     *\n     * @type boolean\n     * @default false\n     * @readonly\n     */\n    this.propagationStopped = false;\n\n    /**\n     * Indicates if {@link core.Event#stopImmediatePropagation} has been called on this event.\n     *\n     * @type boolean\n     * @default false\n     * @readonly\n     */\n    this.immediatePropagationStopped = false;\n\n    /**\n     * Indicates if {@link core.Event#remove} has been called on this event.\n     *\n     * @type boolean\n     * @default false\n     * @readonly\n     */\n    this.removed = false;\n  }\n\n  /**\n   * Sets {@link core.Event#defaultPrevented} to true if the event is cancelable.\n   * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n   * cancel the default behaviour associated with the event.\n   * @return {core.Event} this, chainable\n   */\n  preventDefault() {\n    this.defaultPrevented = this.cancelable;\n    return this;\n  }\n\n  /**\n   * Sets {@link core.Event#propagationStopped} to true.\n   * Mirrors the DOM event standard.\n   * @return {core.Event} this, chainable\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n    return this;\n  }\n\n  /**\n   * Sets {@link core.Event#propagationStopped} and {@link core.Event#immediatePropagationStopped} to true.\n   * Mirrors the DOM event standard.\n   * @return {core.Event} this, chainable\n   */\n  stopImmediatePropagation() {\n    this.immediatePropagationStopped = this.propagationStopped = true;\n    return this;\n  }\n\n  /**\n   * Causes the active listener to be removed via removeEventListener();\n   *\n   * @example\n   * myBtn.addEventListener(\"click\", event => {\n   *   event.remove(); // removes this listener.\n   * });\n   *\n   * @return {core.Event} this, chainable\n   */\n  remove() {\n    this.removed = true;\n    return this;\n  }\n\n  /**\n   * Returns a clone of the Event instance.\n   *\n   * @return {core.Event} a clone of the Event instance.\n   */\n  clone() {\n    const event = new Event(this.type, this.bubbles, this.cancelable);\n    for (let n in this) {\n      if (this.hasOwnProperty(n)) {\n        event[n] = this[n];\n      }\n    }\n    return event;\n  }\n\n  /**\n   * Provides a return {core.Event} this, chainable shortcut method for setting a number of properties on the instance.\n   *\n   * @param {Object} props A generic object containing properties to copy to the instance.\n   * @return {core.Event} this, chainable\n   */\n  set(props) {\n    for (let n in props) {\n      this[n] = props[n];\n    }\n    return this;\n  }\n\n  /**\n   * Returns a string representation of this object.\n   *\n   * @return {string} A string representation of the instance.\n   */\n  toString() {\n    return `[${this.constructor.name} (type=${this.type})]`;\n  }\n}\nexport default Event;","map":{"version":3,"names":["Event","constructor","type","bubbles","cancelable","target","currentTarget","eventPhase","timeStamp","Date","getTime","defaultPrevented","propagationStopped","immediatePropagationStopped","removed","preventDefault","stopPropagation","stopImmediatePropagation","remove","clone","event","n","hasOwnProperty","set","props","toString","name"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/node_modules/@createjs/core/src/events/Event.js"],"sourcesContent":["/**\n * @license Event\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Contains properties and methods shared by all events for use with {@link core.EventDispatcher}.\n * Note that Event objects are often reused, so you should never\n * rely on an event object's state outside of the call stack it was received in.\n *\n * @memberof core\n * @example\n * const evt = new Event(\"myEvent\");\n * const dispatcher = new EventDispatcher();\n * dispatcher.on(\"myEvent\", event => console.log(event.type));\n * dispatcher.dispatchEvent(evt); // logs \"myEvent\"\n *\n * @param {string} type The event type.\n * @param {boolean} [bubbles=false] Indicates whether the event will bubble through the display list.\n * @param {boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.\n */\nclass Event {\n\n\tconstructor (type, bubbles = false, cancelable = false) {\n\t\t/**\n\t\t * The type of event.\n\t\t * @type string\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The object that generated an event.\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.target = null;\n\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.currentTarget = null;\n\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:\n\t\t * <OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t *\n\t\t * @type number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.eventPhase = 0;\n\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.bubbles = bubbles;\n\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via {@link core.Event#preventDefault}.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.cancelable = cancelable;\n\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t *\n\t\t * @type number\n\t\t * @readonly\n\t\t */\n\t\tthis.timeStamp = new Date().getTime();\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#preventDefault} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.defaultPrevented = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopPropagation} or {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.propagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.immediatePropagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#remove} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.removed = false;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#defaultPrevented} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @return {core.Event} this, chainable\n\t */\n\tpreventDefault () {\n\t\tthis.defaultPrevented = this.cancelable;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopPropagation () {\n\t\tthis.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} and {@link core.Event#immediatePropagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopImmediatePropagation () {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t *\n\t * @example\n\t * myBtn.addEventListener(\"click\", event => {\n\t *   event.remove(); // removes this listener.\n\t * });\n\t *\n\t * @return {core.Event} this, chainable\n\t */\n\tremove () {\n\t\tthis.removed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of the Event instance.\n\t *\n\t * @return {core.Event} a clone of the Event instance.\n\t */\n\tclone () {\n\t\tconst event = new Event(this.type, this.bubbles, this.cancelable);\n\t\tfor (let n in this) {\n\t\t\tif (this.hasOwnProperty(n)) {\n\t\t\t\tevent[n] = this[n];\n\t\t\t}\n\t\t}\n\t\treturn event;\n\t}\n\n\t/**\n\t * Provides a return {core.Event} this, chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {core.Event} this, chainable\n\t */\n\tset (props) {\n\t\tfor (let n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t *\n\t * @return {string} A string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (type=${this.type})]`;\n\t}\n\n}\n\nexport default Event;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,CAAC;EAEXC,WAAW,CAAEC,IAAI,EAAuC;IAAA,IAArCC,OAAO,uEAAG,KAAK;IAAA,IAAEC,UAAU,uEAAG,KAAK;IACrD;AACF;AACA;AACA;IACE,IAAI,CAACF,IAAI,GAAGA,IAAI;;IAEhB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACG,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,CAAC;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACJ,OAAO,GAAGA,OAAO;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAGA,UAAU;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,SAAS,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;;IAErC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,KAAK;;IAE7B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,KAAK;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,2BAA2B,GAAG,KAAK;;IAExC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,KAAK;EACrB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,cAAc,GAAI;IACjB,IAAI,CAACJ,gBAAgB,GAAG,IAAI,CAACP,UAAU;IACvC,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCY,eAAe,GAAI;IAClB,IAAI,CAACJ,kBAAkB,GAAG,IAAI;IAC9B,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCK,wBAAwB,GAAI;IAC3B,IAAI,CAACJ,2BAA2B,GAAG,IAAI,CAACD,kBAAkB,GAAG,IAAI;IACjE,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCM,MAAM,GAAI;IACT,IAAI,CAACJ,OAAO,GAAG,IAAI;IACnB,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCK,KAAK,GAAI;IACR,MAAMC,KAAK,GAAG,IAAIpB,KAAK,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,UAAU,CAAC;IACjE,KAAK,IAAIiB,CAAC,IAAI,IAAI,EAAE;MACnB,IAAI,IAAI,CAACC,cAAc,CAACD,CAAC,CAAC,EAAE;QAC3BD,KAAK,CAACC,CAAC,CAAC,GAAG,IAAI,CAACA,CAAC,CAAC;MACnB;IACD;IACA,OAAOD,KAAK;EACb;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCG,GAAG,CAAEC,KAAK,EAAE;IACX,KAAK,IAAIH,CAAC,IAAIG,KAAK,EAAE;MAAE,IAAI,CAACH,CAAC,CAAC,GAAGG,KAAK,CAACH,CAAC,CAAC;IAAE;IAC3C,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACCI,QAAQ,GAAI;IACX,OAAQ,IAAG,IAAI,CAACxB,WAAW,CAACyB,IAAK,UAAS,IAAI,CAACxB,IAAK,IAAG;EACxD;AAED;AAEA,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}