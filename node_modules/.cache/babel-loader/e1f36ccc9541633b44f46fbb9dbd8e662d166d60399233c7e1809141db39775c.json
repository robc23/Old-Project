{"ast":null,"code":"/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera, CameraHelper } from 'three';\nimport Garnet from '../cast/garnet';\nimport Peridot from '../cast/peridot';\nimport Sun from '../cast/sun';\nimport ring from '../textures/ring.jpg';\nimport SolarSystem from '../cast/solarSystem';\nimport galaxyNight from '../textures/galaxy-night.jpg';\nconst DEFAULT_ROTATION_RATE = 0.01;\nconst createDemoUniverse = _ref => {\n  let {\n    fieldOfView,\n    width,\n    height,\n    nearPlane,\n    farPlane\n  } = _ref;\n  const scene = new Scene();\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane);\n  const textureLoader = new TextureLoader();\n  scene.background = textureLoader.load(galaxyNight);\n  let moveDirection = 1;\n  const moveSpeed = 0.001;\n  const orbitRadius = 0.01;\n  const backgroundRingCamera = new Camera();\n  const backgroundRing = new RingGeometry(2);\n  const backgroundMaterial = new MeshBasicMaterial({\n    color: 'white',\n    map: textureLoader.load(ring)\n  });\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial);\n  scene.add(backgroundMesh);\n  const renderer = new WebGLRenderer();\n  renderer.setSize(width, height);\n  scene.add(new AmbientLight('white', 1.5));\n  const directionalLight = new DirectionalLight('white', 1);\n  directionalLight.position.set(-1.5, 1, 2);\n  directionalLight.target.position.set(0, 0, 0);\n  scene.add(directionalLight);\n  scene.add(directionalLight.target);\n  directionalLight.castShadow = true;\n  directionalLight.shadow.mapSize.width = 1024;\n  directionalLight.shadow.mapSize.height = 1024;\n  directionalLight.shadow.camera.near = 0.5;\n  directionalLight.shadow.camera.far = 500;\n  const directionalLightFromBehind = new DirectionalLight('white', 2);\n  directionalLightFromBehind.position.set(-1.5, 1, -2);\n  directionalLightFromBehind.target.position.set(0, 0, 0);\n  scene.add(directionalLightFromBehind);\n  scene.add(directionalLightFromBehind.target);\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n  const solarSystem = new SolarSystem();\n  scene.add(solarSystem.group);\n  const sun = new Sun(5);\n  scene.add(sun.sun);\n  const garnet = new Garnet('gray');\n  sun.addOrbitingObject(garnet.mesh);\n  scene.add(garnet.mesh);\n  const peridot = new Peridot();\n  scene.add(peridot.group);\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false;\n  const turn = () => {\n    turning = true;\n  };\n  const stop = () => {\n    turning = false;\n  };\n  const garnetOrbitRadius = 25; // Adjust the orbit radius as needed\n  let garnetOrbitAngle = 0;\n  const animate = () => {\n    window.requestAnimationFrame(animate);\n    const angle = DEFAULT_ROTATION_RATE * moveDirection;\n    garnet.mesh.position.x = orbitRadius * Math.cos(angle) / 2;\n    garnet.mesh.position.y = orbitRadius * Math.sin(angle);\n    backgroundMesh.rotation.x += DEFAULT_ROTATION_RATE;\n    backgroundMesh.rotation.y += DEFAULT_ROTATION_RATE;\n    garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE;\n    garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE;\n    if (turning) {\n      garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE;\n      garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE;\n\n      // Move Garnet in an orbit around the Sun\n      //const angle = Date.now() * 0.001; // Adjust the speed of the orbit\n      garnetOrbitAngle += DEFAULT_ROTATION_RATE; // Adjust the speed of Garnet's orbit\n      garnet.mesh.position.x = Math.cos(garnetOrbitAngle) * garnetOrbitRadius;\n      garnet.mesh.position.y = Math.sin(garnetOrbitAngle) * garnetOrbitRadius;\n    }\n    if (turning) {\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2;\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4;\n    }\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera);\n  };\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot,\n      sun\n    }\n  };\n};\nexport { createDemoUniverse };","map":{"version":3,"names":["Scene","PerspectiveCamera","WebGLRenderer","AmbientLight","DirectionalLight","TextureLoader","RingGeometry","MeshBasicMaterial","Mesh","Camera","CameraHelper","Garnet","Peridot","Sun","ring","SolarSystem","galaxyNight","DEFAULT_ROTATION_RATE","createDemoUniverse","fieldOfView","width","height","nearPlane","farPlane","scene","camera","textureLoader","background","load","moveDirection","moveSpeed","orbitRadius","backgroundRingCamera","backgroundRing","backgroundMaterial","color","map","backgroundMesh","add","renderer","setSize","directionalLight","position","set","target","castShadow","shadow","mapSize","near","far","directionalLightFromBehind","shadowHelper","solarSystem","group","sun","garnet","addOrbitingObject","mesh","peridot","turning","turn","stop","garnetOrbitRadius","garnetOrbitAngle","animate","window","requestAnimationFrame","angle","x","Math","cos","y","sin","rotation","render","cast"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/universes/demo-universe.js"],"sourcesContent":["/**\n * The scene-manager module serves as an entry point to all scene-related activities, from initialization\n * to access to objects to anything else.\n *\n * The starter version of the scene manager is adapted from the introductory code provided by three.js.\n */\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, TextureLoader, RingGeometry, MeshBasicMaterial, Mesh, Camera, CameraHelper } from 'three'\nimport Garnet from '../cast/garnet'\nimport Peridot from '../cast/peridot'\nimport Sun from '../cast/sun'\nimport ring from '../textures/ring.jpg'\nimport SolarSystem from '../cast/solarSystem'\n\nimport galaxyNight from '../textures/galaxy-night.jpg'\n\nconst DEFAULT_ROTATION_RATE = 0.01\n\nconst createDemoUniverse = ({ fieldOfView, width, height, nearPlane, farPlane}) => {\n  const scene = new Scene()\n  const camera = new PerspectiveCamera(fieldOfView, width / height, nearPlane, farPlane)\n\n  const textureLoader = new TextureLoader()\n  scene.background = textureLoader.load(galaxyNight)\n\n  let moveDirection = 1;\n  const moveSpeed = 0.001;\n  const orbitRadius = 0.01;\n\n  const backgroundRingCamera = new Camera()\n  const backgroundRing = new RingGeometry(2)\n  const backgroundMaterial = new MeshBasicMaterial({ color: 'white', map: textureLoader.load(ring) })\n  const backgroundMesh = new Mesh(backgroundRing, backgroundMaterial)\n  scene.add(backgroundMesh)\n\n  const renderer = new WebGLRenderer()\n  renderer.setSize(width, height)\n\n  scene.add(new AmbientLight('white', 1.5))\n\n  const directionalLight = new DirectionalLight('white', 1)\n  directionalLight.position.set(-1.5, 1, 2)\n  directionalLight.target.position.set(0, 0, 0)\n  scene.add(directionalLight)\n  scene.add(directionalLight.target)\n  directionalLight.castShadow = true;\n\n  directionalLight.shadow.mapSize.width = 1024;\n  directionalLight.shadow.mapSize.height = 1024;\n  directionalLight.shadow.camera.near = 0.5;\n  directionalLight.shadow.camera.far = 500;\n\n\n  const directionalLightFromBehind = new DirectionalLight('white', 2)\n  directionalLightFromBehind.position.set(-1.5, 1, -2)\n  directionalLightFromBehind.target.position.set(0, 0, 0)\n  scene.add(directionalLightFromBehind)\n  scene.add(directionalLightFromBehind.target)\n\n  const shadowHelper = new CameraHelper(directionalLight.shadow.camera);\n  scene.add(shadowHelper);\n\n  const solarSystem = new SolarSystem();\n  scene.add(solarSystem.group);\n\n  const sun = new Sun(5);\n  scene.add(sun.sun);\n  \n  \n  const garnet = new Garnet('gray')\n  sun.addOrbitingObject(garnet.mesh);\n  scene.add(garnet.mesh)\n\n  const peridot = new Peridot()\n  scene.add(peridot.group)\n\n\n  // Turning is a universe-specific behavior: you can decide what these can be.\n  let turning = false\n  const turn = () => {\n    turning = true\n  }\n\n  const stop = () => {\n    turning = false\n  }\n\n  const garnetOrbitRadius = 25; // Adjust the orbit radius as needed\n  let garnetOrbitAngle = 0;\n\n  const animate = () => {\n    window.requestAnimationFrame(animate)\n\n    const angle = DEFAULT_ROTATION_RATE * moveDirection;\n    garnet.mesh.position.x = orbitRadius * Math.cos(angle)/2;\n    garnet.mesh.position.y = orbitRadius * Math.sin(angle);\n\n    backgroundMesh.rotation.x += DEFAULT_ROTATION_RATE;\n    backgroundMesh.rotation.y += DEFAULT_ROTATION_RATE;\n\n    garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE\n    garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE\n\n    if (turning) {\n      garnet.mesh.rotation.x += DEFAULT_ROTATION_RATE;\n      garnet.mesh.rotation.y += DEFAULT_ROTATION_RATE;\n\n      // Move Garnet in an orbit around the Sun\n      //const angle = Date.now() * 0.001; // Adjust the speed of the orbit\n      garnetOrbitAngle += DEFAULT_ROTATION_RATE; // Adjust the speed of Garnet's orbit\n      garnet.mesh.position.x = Math.cos(garnetOrbitAngle) * garnetOrbitRadius;\n      garnet.mesh.position.y = Math.sin(garnetOrbitAngle) * garnetOrbitRadius;\n    }\n  \n    if (turning) {\n\n      peridot.group.rotation.x -= DEFAULT_ROTATION_RATE / 2\n      peridot.group.rotation.y -= DEFAULT_ROTATION_RATE / 4\n    }\n\n\n    scene.position.x += moveSpeed * moveDirection;\n\n    // Check if the scene is out of FOV and change direction\n    if (scene.position.x > 5 || scene.position.x < -5) {\n      moveDirection *= -1; // Change direction\n    }\n\n    renderer.render(scene, backgroundRingCamera);\n    renderer.render(scene, camera)\n  }\n\n  return {\n    camera,\n    renderer,\n    animate,\n    turn,\n    stop,\n    cast: {\n      garnet,\n      peridot,\n      sun,\n    }\n  }\n}\n\nexport { createDemoUniverse }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAK,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,MAAM,EAAEC,YAAY,QAAQ,OAAO;AAC3K,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,GAAG,MAAM,aAAa;AAC7B,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,WAAW,MAAM,qBAAqB;AAE7C,OAAOC,WAAW,MAAM,8BAA8B;AAEtD,MAAMC,qBAAqB,GAAG,IAAI;AAElC,MAAMC,kBAAkB,GAAG,QAAwD;EAAA,IAAvD;IAAEC,WAAW;IAAEC,KAAK;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC;EAC5E,MAAMC,KAAK,GAAG,IAAIxB,KAAK,EAAE;EACzB,MAAMyB,MAAM,GAAG,IAAIxB,iBAAiB,CAACkB,WAAW,EAAEC,KAAK,GAAGC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,CAAC;EAEtF,MAAMG,aAAa,GAAG,IAAIrB,aAAa,EAAE;EACzCmB,KAAK,CAACG,UAAU,GAAGD,aAAa,CAACE,IAAI,CAACZ,WAAW,CAAC;EAElD,IAAIa,aAAa,GAAG,CAAC;EACrB,MAAMC,SAAS,GAAG,KAAK;EACvB,MAAMC,WAAW,GAAG,IAAI;EAExB,MAAMC,oBAAoB,GAAG,IAAIvB,MAAM,EAAE;EACzC,MAAMwB,cAAc,GAAG,IAAI3B,YAAY,CAAC,CAAC,CAAC;EAC1C,MAAM4B,kBAAkB,GAAG,IAAI3B,iBAAiB,CAAC;IAAE4B,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAEV,aAAa,CAACE,IAAI,CAACd,IAAI;EAAE,CAAC,CAAC;EACnG,MAAMuB,cAAc,GAAG,IAAI7B,IAAI,CAACyB,cAAc,EAAEC,kBAAkB,CAAC;EACnEV,KAAK,CAACc,GAAG,CAACD,cAAc,CAAC;EAEzB,MAAME,QAAQ,GAAG,IAAIrC,aAAa,EAAE;EACpCqC,QAAQ,CAACC,OAAO,CAACpB,KAAK,EAAEC,MAAM,CAAC;EAE/BG,KAAK,CAACc,GAAG,CAAC,IAAInC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;EAEzC,MAAMsC,gBAAgB,GAAG,IAAIrC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;EACzDqC,gBAAgB,CAACC,QAAQ,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EACzCF,gBAAgB,CAACG,MAAM,CAACF,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7CnB,KAAK,CAACc,GAAG,CAACG,gBAAgB,CAAC;EAC3BjB,KAAK,CAACc,GAAG,CAACG,gBAAgB,CAACG,MAAM,CAAC;EAClCH,gBAAgB,CAACI,UAAU,GAAG,IAAI;EAElCJ,gBAAgB,CAACK,MAAM,CAACC,OAAO,CAAC3B,KAAK,GAAG,IAAI;EAC5CqB,gBAAgB,CAACK,MAAM,CAACC,OAAO,CAAC1B,MAAM,GAAG,IAAI;EAC7CoB,gBAAgB,CAACK,MAAM,CAACrB,MAAM,CAACuB,IAAI,GAAG,GAAG;EACzCP,gBAAgB,CAACK,MAAM,CAACrB,MAAM,CAACwB,GAAG,GAAG,GAAG;EAGxC,MAAMC,0BAA0B,GAAG,IAAI9C,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;EACnE8C,0BAA0B,CAACR,QAAQ,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACpDO,0BAA0B,CAACN,MAAM,CAACF,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvDnB,KAAK,CAACc,GAAG,CAACY,0BAA0B,CAAC;EACrC1B,KAAK,CAACc,GAAG,CAACY,0BAA0B,CAACN,MAAM,CAAC;EAE5C,MAAMO,YAAY,GAAG,IAAIzC,YAAY,CAAC+B,gBAAgB,CAACK,MAAM,CAACrB,MAAM,CAAC;EACrED,KAAK,CAACc,GAAG,CAACa,YAAY,CAAC;EAEvB,MAAMC,WAAW,GAAG,IAAIrC,WAAW,EAAE;EACrCS,KAAK,CAACc,GAAG,CAACc,WAAW,CAACC,KAAK,CAAC;EAE5B,MAAMC,GAAG,GAAG,IAAIzC,GAAG,CAAC,CAAC,CAAC;EACtBW,KAAK,CAACc,GAAG,CAACgB,GAAG,CAACA,GAAG,CAAC;EAGlB,MAAMC,MAAM,GAAG,IAAI5C,MAAM,CAAC,MAAM,CAAC;EACjC2C,GAAG,CAACE,iBAAiB,CAACD,MAAM,CAACE,IAAI,CAAC;EAClCjC,KAAK,CAACc,GAAG,CAACiB,MAAM,CAACE,IAAI,CAAC;EAEtB,MAAMC,OAAO,GAAG,IAAI9C,OAAO,EAAE;EAC7BY,KAAK,CAACc,GAAG,CAACoB,OAAO,CAACL,KAAK,CAAC;;EAGxB;EACA,IAAIM,OAAO,GAAG,KAAK;EACnB,MAAMC,IAAI,GAAG,MAAM;IACjBD,OAAO,GAAG,IAAI;EAChB,CAAC;EAED,MAAME,IAAI,GAAG,MAAM;IACjBF,OAAO,GAAG,KAAK;EACjB,CAAC;EAED,MAAMG,iBAAiB,GAAG,EAAE,CAAC,CAAC;EAC9B,IAAIC,gBAAgB,GAAG,CAAC;EAExB,MAAMC,OAAO,GAAG,MAAM;IACpBC,MAAM,CAACC,qBAAqB,CAACF,OAAO,CAAC;IAErC,MAAMG,KAAK,GAAGlD,qBAAqB,GAAGY,aAAa;IACnD0B,MAAM,CAACE,IAAI,CAACf,QAAQ,CAAC0B,CAAC,GAAGrC,WAAW,GAAGsC,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC,GAAC,CAAC;IACxDZ,MAAM,CAACE,IAAI,CAACf,QAAQ,CAAC6B,CAAC,GAAGxC,WAAW,GAAGsC,IAAI,CAACG,GAAG,CAACL,KAAK,CAAC;IAEtD9B,cAAc,CAACoC,QAAQ,CAACL,CAAC,IAAInD,qBAAqB;IAClDoB,cAAc,CAACoC,QAAQ,CAACF,CAAC,IAAItD,qBAAqB;IAElDsC,MAAM,CAACE,IAAI,CAACgB,QAAQ,CAACL,CAAC,IAAInD,qBAAqB;IAC/CsC,MAAM,CAACE,IAAI,CAACgB,QAAQ,CAACF,CAAC,IAAItD,qBAAqB;IAE/C,IAAI0C,OAAO,EAAE;MACXJ,MAAM,CAACE,IAAI,CAACgB,QAAQ,CAACL,CAAC,IAAInD,qBAAqB;MAC/CsC,MAAM,CAACE,IAAI,CAACgB,QAAQ,CAACF,CAAC,IAAItD,qBAAqB;;MAE/C;MACA;MACA8C,gBAAgB,IAAI9C,qBAAqB,CAAC,CAAC;MAC3CsC,MAAM,CAACE,IAAI,CAACf,QAAQ,CAAC0B,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACP,gBAAgB,CAAC,GAAGD,iBAAiB;MACvEP,MAAM,CAACE,IAAI,CAACf,QAAQ,CAAC6B,CAAC,GAAGF,IAAI,CAACG,GAAG,CAACT,gBAAgB,CAAC,GAAGD,iBAAiB;IACzE;IAEA,IAAIH,OAAO,EAAE;MAEXD,OAAO,CAACL,KAAK,CAACoB,QAAQ,CAACL,CAAC,IAAInD,qBAAqB,GAAG,CAAC;MACrDyC,OAAO,CAACL,KAAK,CAACoB,QAAQ,CAACF,CAAC,IAAItD,qBAAqB,GAAG,CAAC;IACvD;IAGAO,KAAK,CAACkB,QAAQ,CAAC0B,CAAC,IAAItC,SAAS,GAAGD,aAAa;;IAE7C;IACA,IAAIL,KAAK,CAACkB,QAAQ,CAAC0B,CAAC,GAAG,CAAC,IAAI5C,KAAK,CAACkB,QAAQ,CAAC0B,CAAC,GAAG,CAAC,CAAC,EAAE;MACjDvC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB;;IAEAU,QAAQ,CAACmC,MAAM,CAAClD,KAAK,EAAEQ,oBAAoB,CAAC;IAC5CO,QAAQ,CAACmC,MAAM,CAAClD,KAAK,EAAEC,MAAM,CAAC;EAChC,CAAC;EAED,OAAO;IACLA,MAAM;IACNc,QAAQ;IACRyB,OAAO;IACPJ,IAAI;IACJC,IAAI;IACJc,IAAI,EAAE;MACJpB,MAAM;MACNG,OAAO;MACPJ;IACF;EACF,CAAC;AACH,CAAC;AAED,SAASpC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}