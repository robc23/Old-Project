{"ast":null,"code":"import { SphereGeometry, MeshPhongMaterial, Mesh } from 'three';\nclass Sun {\n  constructor(radius) {\n    const sunGeometry = new SphereGeometry(radius, 32, 32);\n    const sunMaterial = new MeshPhongMaterial({\n      color: 'yellow'\n    });\n    this.sun = new Mesh(sunGeometry, sunMaterial);\n    this.orbitingObjects = []; // Objects that will orbit around the sun\n  }\n\n  addOrbitingObject(object) {\n    this.orbitingObjects.push(object);\n  }\n  updateRotation(rate) {\n    this.sun.rotation.x += rate / 4;\n    this.sun.rotation.y += rate / 4;\n\n    // Update positions for orbiting effect\n    this.orbitingObjects.forEach((object, index) => {\n      const angle = rate * (index + 1);\n      const radius = 20; // Adjust the radius of the orbit\n      object.position.x = this.sun.position.x + radius * Math.cos(angle);\n      object.position.y = this.sun.position.y + radius * Math.sin(angle);\n    });\n  }\n}\nexport default Sun;","map":{"version":3,"names":["SphereGeometry","MeshPhongMaterial","Mesh","Sun","constructor","radius","sunGeometry","sunMaterial","color","sun","orbitingObjects","addOrbitingObject","object","push","updateRotation","rate","rotation","x","y","forEach","index","angle","position","Math","cos","sin"],"sources":["/Users/robert_castro/their-3d-library-robertc-team/src/cast/sun.js"],"sourcesContent":["import { SphereGeometry, MeshPhongMaterial, Mesh } from 'three';\n\nclass Sun {\n  constructor(radius) {\n    const sunGeometry = new SphereGeometry(radius, 32, 32);\n    const sunMaterial = new MeshPhongMaterial({ color: 'yellow' });\n    this.sun = new Mesh(sunGeometry, sunMaterial);\n    this.orbitingObjects = []; // Objects that will orbit around the sun\n  }\n\n  addOrbitingObject(object) {\n    this.orbitingObjects.push(object);\n  }\n\n  updateRotation(rate) {\n    this.sun.rotation.x += rate / 4;\n    this.sun.rotation.y += rate / 4;\n\n    // Update positions for orbiting effect\n    this.orbitingObjects.forEach((object, index) => {\n      const angle = rate * (index + 1);\n      const radius = 20; // Adjust the radius of the orbit\n      object.position.x = this.sun.position.x + radius * Math.cos(angle);\n      object.position.y = this.sun.position.y + radius * Math.sin(angle);\n    });\n  }\n}\n\nexport default Sun;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,OAAO;AAE/D,MAAMC,GAAG,CAAC;EACRC,WAAW,CAACC,MAAM,EAAE;IAClB,MAAMC,WAAW,GAAG,IAAIN,cAAc,CAACK,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;IACtD,MAAME,WAAW,GAAG,IAAIN,iBAAiB,CAAC;MAAEO,KAAK,EAAE;IAAS,CAAC,CAAC;IAC9D,IAAI,CAACC,GAAG,GAAG,IAAIP,IAAI,CAACI,WAAW,EAAEC,WAAW,CAAC;IAC7C,IAAI,CAACG,eAAe,GAAG,EAAE,CAAC,CAAC;EAC7B;;EAEAC,iBAAiB,CAACC,MAAM,EAAE;IACxB,IAAI,CAACF,eAAe,CAACG,IAAI,CAACD,MAAM,CAAC;EACnC;EAEAE,cAAc,CAACC,IAAI,EAAE;IACnB,IAAI,CAACN,GAAG,CAACO,QAAQ,CAACC,CAAC,IAAIF,IAAI,GAAG,CAAC;IAC/B,IAAI,CAACN,GAAG,CAACO,QAAQ,CAACE,CAAC,IAAIH,IAAI,GAAG,CAAC;;IAE/B;IACA,IAAI,CAACL,eAAe,CAACS,OAAO,CAAC,CAACP,MAAM,EAAEQ,KAAK,KAAK;MAC9C,MAAMC,KAAK,GAAGN,IAAI,IAAIK,KAAK,GAAG,CAAC,CAAC;MAChC,MAAMf,MAAM,GAAG,EAAE,CAAC,CAAC;MACnBO,MAAM,CAACU,QAAQ,CAACL,CAAC,GAAG,IAAI,CAACR,GAAG,CAACa,QAAQ,CAACL,CAAC,GAAGZ,MAAM,GAAGkB,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC;MAClET,MAAM,CAACU,QAAQ,CAACJ,CAAC,GAAG,IAAI,CAACT,GAAG,CAACa,QAAQ,CAACJ,CAAC,GAAGb,MAAM,GAAGkB,IAAI,CAACE,GAAG,CAACJ,KAAK,CAAC;IACpE,CAAC,CAAC;EACJ;AACF;AAEA,eAAelB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}